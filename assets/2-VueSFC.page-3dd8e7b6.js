import { _ as _export_sfc, c as createElementBlock, o as openBlock, a as createStaticVNode, U as Ui } from "./_plugin-vue_export-helper-3982510c.js";
JSON.parse('{"title":"Vue SFC 格式 文档页面","description":"","frontmatter":{},"headers":[{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":2,"title":"页面加载器配置","slug":"页面加载器配置","link":"#页面加载器配置","children":[{"level":3,"title":"matched","slug":"matched","link":"#matched","children":[]},{"level":3,"title":"setup","slug":"setup","link":"#setup","children":[]}]}],"relativePath":"src/1-guide/2-documents/2-page/2-VueSFC.page.md"}');
const _sfc_main = { name: "2-VueSFC.page.md" };
const _hoisted_1 = { class: "archive-md" };
const _hoisted_2 = /* @__PURE__ */ createStaticVNode('<h1 id="vue-sfc-格式-文档页面" tabindex="-1">Vue SFC 格式 文档页面 <a class="header-anchor" href="#vue-sfc-格式-文档页面" aria-hidden="true">#</a></h1><p>Vue SFC 格式的 文档页面 通过页面加载器 <code>@idux/archive-page-loader-vue</code> 进行解析以及渲染</p><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-hidden="true">#</a></h2><div class="language-bash"><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">pnpm add @idux/archive-page-loader-vue</span></span>\n<span class="line"></span></code></pre></div><div class="language-js"><pre class="shiki has-diff"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@idux/archive</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createVuePageLoader</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@idux/archive-page-loader-vue</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">...</span></span>\n<span class="line diff add"><span style="color:#A6ACCD;">  pageLoaders: [</span><span style="color:#82AAFF;">createVuePageLoader</span><span style="color:#A6ACCD;">()]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">...</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div><p>配合 <code>vue3</code> 的 <code>vite</code> 插件 <code>@vitejs/plugin-vue</code>，即可实现对vue3文档页面的引入</p><p>由于目前 <code>.md</code> 文件会被内置插件转换成 vue SFC，因此 <code>.md</code> 文件也依赖该页面加载器进行渲染。</p><h2 id="页面加载器配置" tabindex="-1">页面加载器配置 <a class="header-anchor" href="#页面加载器配置" aria-hidden="true">#</a></h2><p>即 <code>createVuePageLoader</code> 的参数</p><p><strong><code>createVuePageLoader</code> 类型定义</strong></p><div class="language-ts"><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createVuePageLoader</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VuePageLoaderOptions</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArchivePageLoader</span></span>\n<span class="line"></span></code></pre></div><p><strong><code>VuePageLoaderOptions</code> 类型定义</strong></p><div class="language-ts"><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VuePageLoaderOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">matched</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">src</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">setup</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="matched" tabindex="-1"><code>matched</code> <a class="header-anchor" href="#matched" aria-hidden="true">#</a></h3><ul><li>类型：<code>string</code></li><li>是否可选：是</li><li>默认: <code>(src) =&gt; /\\.(vue|md)$/.test(src)</code></li></ul><p>判断引入的文件路径是否通过该加载器进行处理, 默认匹配所有 <code>.vue</code> 以及 <code>.md</code> 文件</p><h3 id="setup" tabindex="-1"><code>setup</code> <a class="header-anchor" href="#setup" aria-hidden="true">#</a></h3><ul><li>类型：<code>string</code></li><li>是否可选：是</li></ul><p>初始化的脚本路径，可以使用该脚本对页面 vue 实例所在的 app 上下文进行初始化，也可以用来执行其他的初始化逻辑。同时可以自定义所在 app 的渲染。</p><p>脚本为一个 <code>.ts</code> 或者 <code>.js</code> 类型文件，使用 <code>esm</code> 默认导出以下类型：</p><div class="language-ts"><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VueAppSetup</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">setupApp</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">renderApp</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">nodes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNode</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNodeChild</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><ul><li><strong>setupApp</strong></li></ul><p>demo 所在的 vue app 的初始化执行函数，它会在 app 挂载前执行，可以用在注册组件或者添加全局配置等。</p><ul><li><strong>renderApp</strong></li></ul><p>demo 所在的 vue app 的自定义渲染函数，通常用来加入一些自定义的包裹容器，例如 <code>IxMessageProvider</code>等。</p>', 25);
const _hoisted_27 = [
  _hoisted_2
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, _hoisted_27);
}
const Component = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "/home/runner/work/archive/archive/docs/src/1-guide/2-documents/2-page/2-VueSFC.page.md"]]);
const __archive_data__ = {
  "id": "archive-item-8",
  "filename": "2-VueSFC.page.md",
  "relativePath": "1-guide/2-documents/2-page/2-VueSFC.page.md",
  "query": {},
  instance: Ui("archive-vue-loader-0", Component)
};
export {
  __archive_data__ as default
};
