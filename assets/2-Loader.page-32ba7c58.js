import { _ as _export_sfc, o as openBlock, c as createElementBlock, a as createStaticVNode, U as Ui } from "./_plugin-vue_export-helper-e63733f0.js";
JSON.parse('{"title":"Loader 接口定义","description":"","frontmatter":{},"headers":[{"level":2,"title":"类型定义","slug":"类型定义","link":"#类型定义","children":[{"level":3,"title":"name","slug":"name","link":"#name","children":[]},{"level":3,"title":"matched","slug":"matched","link":"#matched","children":[]},{"level":3,"title":"prefix","slug":"prefix","link":"#prefix","children":[]},{"level":3,"title":"resolve","slug":"resolve","link":"#resolve","children":[]},{"level":3,"title":"transform","slug":"transform","link":"#transform","children":[]}]}],"relativePath":"src/3-loader/2-Loader.page.md"}');
const _sfc_main = { name: "2-Loader.page.md" };
const _hoisted_1 = { class: "archive-md" };
const _hoisted_2 = /* @__PURE__ */ createStaticVNode('<h1 id="loader-接口定义" tabindex="-1">Loader 接口定义 <a class="header-anchor" href="#loader-接口定义" aria-hidden="true">#</a></h1><h2 id="类型定义" tabindex="-1">类型定义 <a class="header-anchor" href="#类型定义" aria-hidden="true">#</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Loader</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">V</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">matched</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">prefix</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">resolve</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">absolutePath</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">query</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">QueryObj</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Pick</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">LoadedItem</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">instanceScript</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">prependScript</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">controls</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">title</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">description</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sourceCodes</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">V</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">transform</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">code</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-hidden="true">#</a></h3><ul><li>类型: <code>string</code></li><li>是否可选: 否</li></ul><p>指定 loader 的唯一名称</p><h3 id="matched" tabindex="-1">matched <a class="header-anchor" href="#matched" aria-hidden="true">#</a></h3><ul><li>类型: <code>(path: string) =&gt; boolean</code></li><li>是否可选: 否</li></ul><p><code>@idux/archive-vite-plugin</code> 所接收的 <code>Loader</code> 不止一个，因此需要根据一定的匹配方法来指定什么文件使用哪个 <code>Loader</code></p><p><code>matched</code> 接受文件的路径，来由 <code>Loader</code> 判断是否解析该文件，默认使用第一个匹配到的 <code>Loader</code> 解析文件。</p><h3 id="prefix" tabindex="-1">prefix <a class="header-anchor" href="#prefix" aria-hidden="true">#</a></h3><ul><li>类型: <code>string</code></li><li>是否可选: 是</li></ul><p>同 <code>matched</code>，前缀也是用来分配文件匹配到的 <code>Loader</code>，默认为 <code>archive</code>。</p><p>例如：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> ArchiveItem </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">archive:./path/to/component.vue</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span></code></pre></div><p>以上 <code>import</code> 语句对应的前缀则是 <code>archive</code>，</p><h3 id="resolve" tabindex="-1">resolve <a class="header-anchor" href="#resolve" aria-hidden="true">#</a></h3><ul><li>类型: <code>(absolutePath: string, query: QueryObj) =&gt; Promise&lt;Pick&lt;LoadedItem, &#39;instanceScript&#39; \\| &#39;prependScript&#39; \\| &#39;controls&#39; \\| &#39;title&#39; \\| &#39;description&#39; \\| &#39;sourceCodes&#39;&gt; &amp; V&gt;</code></li><li>是否可选: 否</li></ul><p>将给定路径和query的文件解析成 <code>LoadedItem</code> 对象。</p><h3 id="transform" tabindex="-1">transform <a class="header-anchor" href="#transform" aria-hidden="true">#</a></h3><ul><li>类型: <code>(code: string) =&gt; Promise&lt;string&gt; \\| string</code></li><li>是否可选: 是</li></ul><p>对于某些特定的解析场景，可能需要对文件进行二次转换，该接口则提供了转换的能力。</p>', 22);
const _hoisted_24 = [
  _hoisted_2
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, _hoisted_24);
}
const Component = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "/home/runner/work/archive/archive/docs/src/3-loader/2-Loader.page.md"]]);
const __archive_data__ = {
  "id": "archive-item-20",
  "filename": "2-Loader.page.md",
  "relativePath": "3-loader/2-Loader.page.md",
  "query": {},
  instance: Ui("archive-vue-loader-0", Component)
};
export {
  __archive_data__ as default
};
